import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, y as validate_each_argument, v as validate_slots, z as empty, n as insert_hydration_dev, b as detach_dev, e as element, t as text, f as claim_element, g as children, h as claim_text, j as attr_dev, A as toggle_class, k as add_location, o as append_hydration_dev, r as listen_dev, a as space, q as query_selector_all, c as claim_space, p as noop, B as destroy_each, u as run_all, l as src_url_equal, m as set_style, x as set_data_dev } from './client.13e60c2a.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function hslide(node, {
	delay = 0,
	duration = 120,
	easing = cubicOut
})  {
	const style = getComputedStyle(node);
	const opacity = +style.opacity;
	const width = parseFloat(style.width);
	const padding_left = parseFloat(style.paddingLeft);
	const padding_right = parseFloat(style.paddingRight);
	const margin_left = parseFloat(style.marginLeft);
	const margin_right = parseFloat(style.marginRight);
	const border_left_width = parseFloat(style.borderLeftWidth);
	const border_right_width = parseFloat(style.borderRightWidth);

	return {
		delay,
		duration,
		easing,
		css: t =>
			`overflow: hidden;` +
			`opacity: ${Math.min(t * 20, 1) * opacity};` +
			`width: ${t * width}px;` +
			`padding-left: ${t * padding_left}px;` +
			`padding-right: ${t * padding_right}px;` +
			`margin-left: ${t * margin_left}px;` +
			`margin-right: ${t * margin_right}px;` +
			`border-left-width: ${t * border_left_width}px;` +
			`border-right-width: ${t * border_right_width}px;`
	};
}

/* src\routes\work.svelte generated by Svelte v3.46.4 */
const file = "src\\routes\\work.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	child_ctx[21] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	child_ctx[23] = i;
	return child_ctx;
}

// (86:4) {#if id === cur}
function create_if_block(ctx) {
	let div5;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let div1;
	let span;
	let t1;
	let div0;
	let t2;
	let t3;
	let div2;
	let t4;
	let t5;
	let div4;
	let t6_value = /*slide*/ ctx[19].text + "";
	let t6;
	let t7;
	let a;
	let t8;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div5 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			div1 = element("div");
			span = element("span");
			t1 = text(/*header*/ ctx[3]);
			div0 = element("div");
			t2 = text("✖");
			t3 = space();
			div2 = element("div");
			t4 = text(/*tekst*/ ctx[0]);
			t5 = space();
			div4 = element("div");
			t6 = text(t6_value);
			t7 = text(" - ");
			a = element("a");
			t8 = text(/*les*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div5 = claim_element(nodes, "DIV", { style: true, class: true });
			var div5_nodes = children(div5);
			img = claim_element(div5_nodes, "IMG", { src: true, alt: true, class: true });
			t0 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { style: true, class: true });
			var div3_nodes = children(div3);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			span = claim_element(div1_nodes, "SPAN", {});
			var span_nodes = children(span);
			t1 = claim_text(span_nodes, /*header*/ ctx[3]);
			span_nodes.forEach(detach_dev);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t2 = claim_text(div0_nodes, "✖");
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", {});
			var div2_nodes = children(div2);
			t4 = claim_text(div2_nodes, /*tekst*/ ctx[0]);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t5 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t6 = claim_text(div4_nodes, t6_value);
			t7 = claim_text(div4_nodes, " - ");
			a = claim_element(div4_nodes, "A", { class: true });
			var a_nodes = children(a);
			t8 = claim_text(a_nodes, /*les*/ ctx[2]);
			a_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (!src_url_equal(img.src, img_src_value = /*slide*/ ctx[19].content)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "balls");
			attr_dev(img, "class", "svelte-keosfj");
			add_location(img, file, 91, 5, 2970);
			add_location(span, file, 93, 30, 3117);
			attr_dev(div0, "class", "X svelte-keosfj");
			add_location(div0, file, 93, 51, 3138);
			attr_dev(div1, "class", "descHeader svelte-keosfj");
			add_location(div1, file, 93, 6, 3093);
			add_location(div2, file, 94, 6, 3209);
			set_style(div3, "display", /*disp*/ ctx[1]);
			attr_dev(div3, "class", "bildeDesc svelte-keosfj");
			add_location(div3, file, 92, 5, 3039);
			attr_dev(a, "class", "svelte-keosfj");
			add_location(a, file, 96, 59, 3301);
			attr_dev(div4, "class", "bildeTekst svelte-keosfj");
			add_location(div4, file, 96, 20, 3262);
			set_style(div5, "background", /*slide*/ ctx[19].bg);
			attr_dev(div5, "class", "slide svelte-keosfj");
			add_location(div5, file, 86, 4, 2885);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div5, anchor);
			append_hydration_dev(div5, img);
			append_hydration_dev(div5, t0);
			append_hydration_dev(div5, div3);
			append_hydration_dev(div3, div1);
			append_hydration_dev(div1, span);
			append_hydration_dev(span, t1);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, t2);
			append_hydration_dev(div3, t3);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, t4);
			append_hydration_dev(div5, t5);
			append_hydration_dev(div5, div4);
			append_hydration_dev(div4, t6);
			append_hydration_dev(div4, t7);
			append_hydration_dev(div4, a);
			append_hydration_dev(a, t8);

			if (!mounted) {
				dispose = [
					listen_dev(img, "click", /*lesMer*/ ctx[8](/*id*/ ctx[23]), false, false, false),
					listen_dev(div0, "click", /*click_handler*/ ctx[12], false, false, false),
					listen_dev(a, "click", /*click_handler_1*/ ctx[13], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*header*/ 8) set_data_dev(t1, /*header*/ ctx[3]);
			if (dirty & /*tekst*/ 1) set_data_dev(t4, /*tekst*/ ctx[0]);

			if (dirty & /*disp*/ 2) {
				set_style(div3, "display", /*disp*/ ctx[1]);
			}

			if (dirty & /*les*/ 4) set_data_dev(t8, /*les*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(86:4) {#if id === cur}",
		ctx
	});

	return block;
}

// (85:3) {#each slides as slide, id}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*id*/ ctx[23] === /*cur*/ ctx[4] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*id*/ ctx[23] === /*cur*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(85:3) {#each slides as slide, id}",
		ctx
	});

	return block;
}

// (114:1) {#each slides as slide, i}
function create_each_block(ctx) {
	let button;
	let t_value = /*i*/ ctx[21] + 1 + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[16](/*i*/ ctx[21]);
	}

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "dot svelte-keosfj");
			toggle_class(button, "selected", /*cur*/ ctx[4] == /*i*/ ctx[21]);
			add_location(button, file, 114, 2, 3630);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_4, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*cur*/ 16) {
				toggle_class(button, "selected", /*cur*/ ctx[4] == /*i*/ ctx[21]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(114:1) {#each slides as slide, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div3;
	let div2;
	let div1;
	let t1;
	let div0;
	let button0;
	let t2;
	let t3;
	let button1;
	let t4;
	let t5;
	let div4;
	let mounted;
	let dispose;
	let each_value_1 = /*slides*/ ctx[5];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*slides*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t1 = space();
			div0 = element("div");
			button0 = element("button");
			t2 = text("<");
			t3 = space();
			button1 = element("button");
			t4 = text(">");
			t5 = space();
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-172vdw1\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(div1_nodes);
			}

			t1 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			button0 = claim_element(div0_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t2 = claim_text(button0_nodes, "<");
			button0_nodes.forEach(detach_dev);
			t3 = claim_space(div0_nodes);
			button1 = claim_element(div0_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t4 = claim_text(button1_nodes, ">");
			button1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div4_nodes);
			}

			div4_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Work";
			attr_dev(button0, "class", "svelte-keosfj");
			add_location(button0, file, 101, 4, 3415);
			attr_dev(button1, "class", "svelte-keosfj");
			add_location(button1, file, 104, 4, 3479);
			attr_dev(div0, "class", "controls svelte-keosfj");
			add_location(div0, file, 100, 3, 3387);
			attr_dev(div1, "class", "inner-wrapper svelte-keosfj");
			add_location(div1, file, 83, 2, 2798);
			attr_dev(div2, "class", "outer-wrapper svelte-keosfj");
			add_location(div2, file, 82, 1, 2767);
			attr_dev(div3, "class", "extra-outer-wrapper svelte-keosfj");
			add_location(div3, file, 81, 0, 2731);
			attr_dev(div4, "class", "dots svelte-keosfj");
			add_location(div4, file, 112, 0, 3579);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div3, anchor);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div1, null);
			}

			append_hydration_dev(div1, t1);
			append_hydration_dev(div1, div0);
			append_hydration_dev(div0, button0);
			append_hydration_dev(button0, t2);
			append_hydration_dev(div0, t3);
			append_hydration_dev(div0, button1);
			append_hydration_dev(button1, t4);
			insert_hydration_dev(target, t5, anchor);
			insert_hydration_dev(target, div4, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(window, "keyup", /*handleShortcut*/ ctx[11], false, false, false),
					listen_dev(button0, "click", /*click_handler_2*/ ctx[14], false, false, false),
					listen_dev(button1, "click", /*click_handler_3*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*slides, visBilde, les, disp, tekst, header, lesMer, cur*/ 447) {
				each_value_1 = /*slides*/ ctx[5];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div1, t1);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*cur, changeSlide*/ 80) {
				each_value = /*slides*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div4);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const ARROW_LEFT = 37;
const ARROW_RIGHT = 39;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Work', slots, []);
	let tekst = 0;
	let disp = "none";
	let les = "les mer";
	let header = 0;

	let slides = [
		{
			content: 'buss.jpg',
			bg: 'gray',
			text: 'Jobbuke i Tide AS'
		},
		{
			content: 'maling.jpg',
			bg: 'gray',
			text: 'Jeg malte et hus'
		},
		{
			content: 'placeholder.jpg',
			bg: 'gray',
			text: 'Jeg er daglig leder i Teo AS'
		},
		{
			content: 'skolen.jpg',
			bg: 'linear-gradient(270deg, rgb(253,230,194), rgb(233,214,200))',
			text: 'Elevbedrift Steinerskolen'
		}
	];

	let cur = 0;

	function changeSlide(slide) {
		$$invalidate(4, cur = slide);
	}

	function visBilde() {
		if (disp == "inline") {
			$$invalidate(1, disp = "none");
			$$invalidate(2, les = "les mer");
		} else if (disp == "none") {
			$$invalidate(1, disp = "inline");
			$$invalidate(2, les = "les mindre");
		} else ;
	}

	const lesMer = id => {
		if (id === 0) {
			$$invalidate(0, tekst = "Jeg jobbet i Tide AS i en uke på ungdomskolen da vi hadde noe som het \"Jobbuke\", det bestod av at vi valgte en bedrift og spurte om vi kunne jobbe der i en uke for å få en følelse av hvordan arbeidslivet er. Hos Tide jobbet jeg med enkle greier som å legge inn riktig data på når og hvor ting som har med busser skjer.");
			$$invalidate(3, header = "Tide AS");
		} else if (id === 1) {
			$$invalidate(0, tekst = "Sist sommer malte jeg moren min sitt hus, det var en grei mulighet til å tjene penger. Jobben inkluderte å vaske og skrape den gamle malingen, også male to strøk med ny maling. Det var gøy i starten men ikke på slutten så jeg kommer ikke til å gjøre det igjen på en stund!");
			$$invalidate(3, header = "Maling");
		} else if (id === 2) {
			$$invalidate(0, tekst = "Da jeg ble 18 år gammel, startet jeg mitt eget AS, der jeg er eier og daglig leder. Foreløpig miner jeg kryptovaluta, men skal utvide til andre typer investering/spekulering i fremtiden. Det er ganske gøy men en del arbeid.");
			$$invalidate(3, header = "Teo AS");
		} else if (id === 3) {
			$$invalidate(0, tekst = "Da jeg gikk på steinerskolen laget vi en elevbedrift som gikk ut på å lage naturlig såpe og selge den på eventuelle markeder, jeg jobbet med salg og pakking. Vi tjente greit med penger på det, men såpen var en complete scam altså.");
			$$invalidate(3, header = "Elevbedrift");
		} else {
			$$invalidate(0, tekst = "not a page?");
		}
	};

	const clamp = (number, min, max) => Math.min(Math.max(number, min), max);
	const transition_args = { duration: 200 };

	function prev(e) {
		$$invalidate(4, cur = clamp($$invalidate(4, --cur), 0, slides.length - 1));
	}

	function next(e) {
		$$invalidate(4, cur = clamp($$invalidate(4, ++cur), 0, slides.length - 1));
	}

	function handleShortcut(e) {
		if (e.keyCode === ARROW_LEFT) {
			prev();
		}

		if (e.keyCode === ARROW_RIGHT) {
			next();
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Work> was created with unknown prop '${key}'`);
	});

	const click_handler = () => visBilde();
	const click_handler_1 = () => visBilde();
	const click_handler_2 = () => prev();
	const click_handler_3 = () => next();
	const click_handler_4 = i => changeSlide(i);

	$$self.$capture_state = () => ({
		hslide,
		tekst,
		disp,
		les,
		header,
		slides,
		cur,
		changeSlide,
		visBilde,
		lesMer,
		clamp,
		transition_args,
		prev,
		next,
		ARROW_LEFT,
		ARROW_RIGHT,
		handleShortcut
	});

	$$self.$inject_state = $$props => {
		if ('tekst' in $$props) $$invalidate(0, tekst = $$props.tekst);
		if ('disp' in $$props) $$invalidate(1, disp = $$props.disp);
		if ('les' in $$props) $$invalidate(2, les = $$props.les);
		if ('header' in $$props) $$invalidate(3, header = $$props.header);
		if ('slides' in $$props) $$invalidate(5, slides = $$props.slides);
		if ('cur' in $$props) $$invalidate(4, cur = $$props.cur);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		tekst,
		disp,
		les,
		header,
		cur,
		slides,
		changeSlide,
		visBilde,
		lesMer,
		prev,
		next,
		handleShortcut,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4
	];
}

class Work extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Work",
			options,
			id: create_fragment.name
		});
	}
}

export { Work as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

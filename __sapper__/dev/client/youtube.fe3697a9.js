import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, k as add_location, j as attr_dev, l as src_url_equal, n as insert_hydration_dev, o as append_hydration_dev, r as listen_dev, p as noop } from './client.780e8e67.js';

/* src\routes\youtube.svelte generated by Svelte v3.46.4 */

const file = "src\\routes\\youtube.svelte";

function create_fragment(ctx) {
	let t0;
	let div3;
	let div0;
	let h10;
	let t1;
	let t2;
	let div1;
	let t3;
	let t4;
	let div2;
	let h11;
	let t5;
	let t6;
	let div4;
	let t7;
	let t8;
	let div5;
	let iframe;
	let iframe_src_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			t0 = space();
			div3 = element("div");
			div0 = element("div");
			h10 = element("h1");
			t1 = text("Random video generator");
			t2 = space();
			div1 = element("div");
			t3 = text("bar");
			t4 = space();
			div2 = element("div");
			h11 = element("h1");
			t5 = text("Klikk p책 knappen for 책 generere en tilfeldig youtube video fra min kanal");
			t6 = space();
			div4 = element("div");
			t7 = text("Generer tilfeldig video");
			t8 = space();
			div5 = element("div");
			iframe = element("iframe");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all('[data-svelte=\"svelte-123nb1s\"]', document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h10 = claim_element(div0_nodes, "H1", {});
			var h10_nodes = children(h10);
			t1 = claim_text(h10_nodes, "Random video generator");
			h10_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, "bar");
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			h11 = claim_element(div2_nodes, "H1", {});
			var h11_nodes = children(h11);
			t5 = claim_text(h11_nodes, "Klikk p책 knappen for 책 generere en tilfeldig youtube video fra min kanal");
			h11_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			div4 = claim_element(nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t7 = claim_text(div4_nodes, "Generer tilfeldig video");
			div4_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			div5 = claim_element(nodes, "DIV", { class: true });
			var div5_nodes = children(div5);

			iframe = claim_element(div5_nodes, "IFRAME", {
				class: true,
				src: true,
				title: true,
				frameborder: true,
				allow: true
			});

			children(iframe).forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Youtube";
			add_location(h10, file, 75, 24, 1830);
			attr_dev(div0, "class", "header svelte-1xzmkao");
			add_location(div0, file, 75, 4, 1810);
			attr_dev(div1, "class", "bar svelte-1xzmkao");
			add_location(div1, file, 76, 4, 1873);
			add_location(h11, file, 77, 22, 1923);
			attr_dev(div2, "class", "midt svelte-1xzmkao");
			add_location(div2, file, 77, 4, 1905);
			attr_dev(div3, "class", "container svelte-1xzmkao");
			add_location(div3, file, 74, 0, 1781);
			attr_dev(div4, "class", "button svelte-1xzmkao");
			add_location(div4, file, 80, 0, 2022);
			attr_dev(iframe, "class", "video svelte-1xzmkao");
			if (!src_url_equal(iframe.src, iframe_src_value = /*videoer*/ ctx[1][/*videoID*/ ctx[0]])) attr_dev(iframe, "src", iframe_src_value);
			attr_dev(iframe, "title", "YouTube video player");
			attr_dev(iframe, "frameborder", "0");
			attr_dev(iframe, "allow", "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture");
			iframe.allowFullscreen = true;
			add_location(iframe, file, 82, 0, 2126);
			attr_dev(div5, "class", "videoContainer svelte-1xzmkao");
			add_location(div5, file, 81, 0, 2096);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, div3, anchor);
			append_hydration_dev(div3, div0);
			append_hydration_dev(div0, h10);
			append_hydration_dev(h10, t1);
			append_hydration_dev(div3, t2);
			append_hydration_dev(div3, div1);
			append_hydration_dev(div1, t3);
			append_hydration_dev(div3, t4);
			append_hydration_dev(div3, div2);
			append_hydration_dev(div2, h11);
			append_hydration_dev(h11, t5);
			insert_hydration_dev(target, t6, anchor);
			insert_hydration_dev(target, div4, anchor);
			append_hydration_dev(div4, t7);
			insert_hydration_dev(target, t8, anchor);
			insert_hydration_dev(target, div5, anchor);
			append_hydration_dev(div5, iframe);

			if (!mounted) {
				dispose = listen_dev(div4, "click", /*click_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*videoID*/ 1 && !src_url_equal(iframe.src, iframe_src_value = /*videoer*/ ctx[1][/*videoID*/ ctx[0]])) {
				attr_dev(iframe, "src", iframe_src_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div4);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(div5);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Youtube', slots, []);
	let videoID = 0;

	let videoer = [
		"https://www.youtube.com/embed/vTylSBbaBfA",
		"https://www.youtube.com/embed/C9vbX4zXBK8",
		"https://www.youtube.com/embed/W1bTE6rQGiw",
		"https://www.youtube.com/embed/REjV47Bj-2o",
		"https://www.youtube.com/embed/2TMySS2iOR8",
		"https://www.youtube.com/embed/EAH2TnzYdGs",
		"https://www.youtube.com/embed/dpy2eRbRAls",
		"https://www.youtube.com/embed/thcisl9LKMs"
	];

	const video = () => {
		$$invalidate(0, videoID = Math.floor(Math.random() * (7 + 1)));
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Youtube> was created with unknown prop '${key}'`);
	});

	const click_handler = () => video();
	$$self.$capture_state = () => ({ videoID, videoer, video });

	$$self.$inject_state = $$props => {
		if ('videoID' in $$props) $$invalidate(0, videoID = $$props.videoID);
		if ('videoer' in $$props) $$invalidate(1, videoer = $$props.videoer);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [videoID, videoer, video, click_handler];
}

class Youtube extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Youtube",
			options,
			id: create_fragment.name
		});
	}
}

export { Youtube as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW91dHViZS5mZTM2OTdhOS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy95b3V0dWJlLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3ZlbHRlOmhlYWQ+XHJcbiAgICA8dGl0bGU+WW91dHViZTwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG5cclxuPHNjcmlwdD5cclxubGV0IHZpZGVvSUQgPSAwXHJcblxyXG5sZXQgdmlkZW9lciA9IFtcclxuICAgIFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvdlR5bFNCYmFCZkFcIiwgXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9DOXZiWDR6WEJLOFwiLFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvVzFiVEU2clFHaXdcIixcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1JFalY0N0JqLTJvXCIsXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8yVE15U1MyaU9SOFwiLFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvRUFIMlRuellkR3NcIixcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL2RweTJlUmJSQWxzXCIsXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC90aGNpc2w5TEtNc1wiXHJcbl1cclxuXHJcbmNvbnN0IHZpZGVvID0gKCkgPT4ge1xyXG4gICAgdmlkZW9JRCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg3ICsgMSkpO1xyXG59XHJcblxyXG5cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT5cclxuICAgIC5jb250YWluZXJ7XHJcbiAgICAgICAgd2lkdGg6MTAwO1xyXG4gICAgICAgIGhlaWdodDo3MCU7XHJcbiAgICB9XHJcbiAgICAuaGVhZGVye1xyXG4gICAgICAgIGZvbnQtc2l6ZTpjYWxjKDF2dyArIDAuNXJlbSk7XHJcbiAgICAgICAgbWFyZ2luOmF1dG87XHJcbiAgICAgICAgd2lkdGg6MTAwJTtcclxuICAgICAgICB0ZXh0LWFsaWduOmNlbnRlcjtcclxuICAgIH1cclxuICAgIC5taWR0e1xyXG4gICAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xyXG4gICAgICAgIHdpZHRoOjUwJTtcclxuICAgICAgICBtYXJnaW46YXV0bztcclxuICAgICAgICBtYXJnaW4tdG9wOjEwcHg7XHJcbiAgICAgICAgZm9udC1zaXplOmNhbGMoMC42NjZ2dyArIDAuMnJlbSk7XHJcbiAgICB9XHJcbiAgICAuYmFye1xyXG4gICAgICAgIG1hcmdpbjphdXRvO1xyXG4gICAgICAgIG1hcmdpbi10b3A6LTEwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICAgICAgd2lkdGg6Y2FsYyg4dncgKyAyMHB4KTtcclxuICAgICAgICBoZWlnaHQ6Y2FsYygwLjh2dyArIDEwcHgpO1xyXG4gICAgICAgIGZvbnQtc2l6ZTowO1xyXG4gICAgfVxyXG4gICAgLnZpZGVvQ29udGFpbmVyIHtcclxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcclxuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XHJcbiAgICAgICAgd2lkdGg6MTAwJTtcclxuICAgICAgICBwYWRkaW5nLXRvcDo1Ni4yNSU7XHJcbiAgICB9XHJcbiAgICAudmlkZW97XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICByaWdodDogMDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB9XHJcbiAgICAuYnV0dG9ue1xyXG4gICAgICAgIGJhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDAuMzc1dHVybiwgI0FCRDY5OSwgIzc1QzlCNyk7XHJcbiAgICAgICAgd2lkdGg6NjAlO1xyXG4gICAgICAgIGhlaWdodDozMCU7XHJcbiAgICAgICAgZm9udC1zaXplOmNhbGMoMC42NjZ2dyArIDEuM3JlbSk7XHJcbiAgICAgICAgcGFkZGluZzoyJTtcclxuICAgICAgICBtYXJnaW46YXV0bztcclxuICAgICAgICBtYXJnaW4tYm90dG9tOjQlO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6MXZ3O1xyXG4gICAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xyXG4gICAgfVxyXG4gICAgLmJ1dHRvbjpob3ZlcntcclxuICAgICAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPjxoMT5SYW5kb20gdmlkZW8gZ2VuZXJhdG9yPC9oMT48L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJiYXJcIj5iYXI8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJtaWR0XCI+PGgxPktsaWtrIHDDpSBrbmFwcGVuIGZvciDDpSBnZW5lcmVyZSBlbiB0aWxmZWxkaWcgeW91dHViZSB2aWRlbyBmcmEgbWluIGthbmFsPC9oMT48L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48ZGl2IG9uOmNsaWNrPXsoKT0+dmlkZW8oKX0gY2xhc3M9XCJidXR0b25cIj5HZW5lcmVyIHRpbGZlbGRpZyB2aWRlbzwvZGl2PlxyXG48ZGl2IGNsYXNzPVwidmlkZW9Db250YWluZXJcIj5cclxuPGlmcmFtZSBjbGFzcz1cInZpZGVvXCIgc3JjPXt2aWRlb2VyW3ZpZGVvSURdfSB0aXRsZT1cIllvdVR1YmUgdmlkZW8gcGxheWVyXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3c9XCJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPlxyXG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7YUEyRTRCLHdCQUFzQixDQUFBLENBQUE7OzthQUM3QixLQUFHLENBQUEsQ0FBQTs7OzthQUNFLDBFQUF3RSxDQUFBLENBQUE7OzthQUd2RCx5QkFBdUIsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7OzhCQUx0Qyx3QkFBc0IsQ0FBQSxDQUFBOzs7Ozs7K0JBQzdCLEtBQUcsQ0FBQSxDQUFBOzs7Ozs7OzhCQUNFLDBFQUF3RSxDQUFBLENBQUE7Ozs7Ozs7K0JBR3ZELHlCQUF1QixDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUV2QyxHQUFBLElBQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxnQkFBQSxlQUFBLEdBQU8sZ0JBQUMsR0FBTyxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxRQUFBLENBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxnQkFBQSxDQUFBLENBQUE7Ozs7Ozs7Ozs7O0dBUjFDLG9CQUlNLENBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTtHQUhGLG9CQUF5RCxDQUFBLElBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtHQUFyQyxvQkFBK0IsQ0FBQSxJQUFBLEVBQUEsR0FBQSxDQUFBLENBQUE7OztHQUNuRCxvQkFBMEIsQ0FBQSxJQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7OztHQUMxQixvQkFBeUcsQ0FBQSxJQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7R0FBdkYsb0JBQWlGLENBQUEsSUFBQSxFQUFBLEdBQUEsQ0FBQSxDQUFBOzs7R0FHdkcsb0JBQXdFLENBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTs7O0dBQ3hFLG9CQUVNLENBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTtHQUROLG9CQUFvTixDQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7QUFBekwsR0FBQSxJQUFBLEtBQUEsZUFBQSxDQUFBLElBQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxnQkFBQSxlQUFBLEdBQU8sZ0JBQUMsR0FBTyxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE1RXRDLENBQUEsSUFBQSxPQUFPLEdBQUcsQ0FBQyxDQUFBOztLQUVYLE9BQU8sR0FBQTtFQUNQLDJDQUEyQztFQUFFLDJDQUEyQztFQUFDLDJDQUEyQztFQUFDLDJDQUEyQztFQUFDLDJDQUEyQztFQUFDLDJDQUEyQztFQUFDLDJDQUEyQztFQUFDLDJDQUEyQzs7O09BRzlWLEtBQUssR0FBQSxNQUFBO2tCQUNQLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUEsSUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7NkJBbUU1QixLQUFLLEVBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
